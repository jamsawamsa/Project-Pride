<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define vars
screenShake = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///position view based on player's direction
// var xTo and yTo are the x and y coordinates of where you want your view to finally end up
if (!screenShake) {
// regular logic
var xTo, yTo;

if (instance_exists(player_par)) { // check if the player object exists
    xTo = player_par.x + (sign(player_par.image_xscale) * 96); // get the area where the player is facing
    yTo = player_par.y;
    
    // diffX and diffY are the difference between the actual x and y you want the view to be
    var diffX, diffY;
    diffX = xTo - x;
    diffY = yTo - y;
    // smooth transition and snapping to xTo and yTo
    if (abs(diffX) &lt; 1 ) x = xTo; else x += diffX/25;
    if (abs(diffY) &lt; 1 ) y = yTo; else y += diffY/25;
    
}
// apply to the view
view_xview[0] = -(view_wview/2) + x;
view_yview[0] = -(view_hview/2) + y;


// clamp the view to be within the bounds of the room
view_xview[0] = clamp(view_xview[0], 0,room_width - view_wview[0]);
view_yview[0] = clamp(view_yview[0], 0, room_height - view_hview[0]);
}
else if (screenShake) { // screen shake
    view_xview[0] = clamp(view_xview[0] + irandom_range(-2, 2), 0, room_width - view_wview[0]);
    view_yview[0] = clamp(view_yview[0] + irandom_range(-2, 2), 0, room_height - view_hview[0]);
    screenShake = 0;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
